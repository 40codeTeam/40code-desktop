{"version":3,"file":"js/addon-entry-editor-theme3.js","sources":["webpack://GUI/./src/addons/addons/editor-theme3/theme3.css","webpack://GUI/./src/addons/addons/editor-theme3/_runtime_entry.js","webpack://GUI/./src/addons/addons/editor-theme3/theme3.js","webpack://GUI/./src/addons/libraries/common/cs/text-color.esm.js"],"sourcesContent":["exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"path.blocklyBlockBackground[fill=\\\"#FF6680\\\"],\\npath.blocklyBlockBackground[fill=\\\"#5CB1D6\\\"],\\npath.blocklyBlockBackground[fill=\\\"#FFBF00\\\"],\\npath.blocklyBlockBackground[fill=\\\"#29beb8\\\"],\\ng[data-category] > path.blocklyBlockBackground {\\n  stroke: #0003;\\n}\\ng[data-argument-type=\\\"dropdown\\\"] > path,\\ng[data-argument-type=\\\"variable\\\"] > path,\\npath[data-argument-type=\\\"boolean\\\"],\\ng[data-shapes=\\\"c-block c-1 hat\\\"] > g[data-shapes=\\\"stack\\\"]:not(.blocklyDraggable) > path /* block preview in define block */ {\\n  stroke: #0003;\\n  fill: #0001;\\n}\\ng[data-argument-type=\\\"dropdown\\\"] > rect,\\ng[data-argument-type=\\\"variable\\\"] > rect {\\n  stroke: #0003;\\n  fill: #0000;\\n}\\ng[data-argument-type*=\\\"text\\\"] > path,\\n[data-category] g > line {\\n  stroke: #0002;\\n}\\n.scratchCategoryItemBubble {\\n  border-color: #0003 !important;\\n}\\n\\n.fieldTextInput {\\n  border-color: #0003 !important;\\n}\\n\\n.blocklyBlockBackground[fill=\\\"#FFFFFF\\\"] {\\n  fill: var(--editorTheme3-inputColor);\\n}\\n.blocklyEditableText > text {\\n  fill: var(--editorTheme3-inputColor-text);\\n}\\n.blocklyHtmlInput {\\n  background-color: var(--editorTheme3-inputColor);\\n  color: var(--editorTheme3-inputColor-text);\\n}\\n\", \"\"]);\n\n// exports\n","/* generated by pull.js */\nimport _js from \"./theme3.js\";\nimport _css from \"!css-loader!./theme3.css\";\nexport const resources = {\n  \"theme3.js\": _js,\n  \"theme3.css\": _css,\n};\n","import { textColor, multiply } from \"../../libraries/common/cs/text-color.esm.js\";\n\nfunction updateSettings(addon, newStyle) {\n  document.documentElement.style.setProperty('--editorTheme3-inputColor-text', textColor(addon.settings.get('input-color')));\n  var stylesheet = \"\";\n  const textMode = addon.settings.get(\"text\");\n  if (textMode === \"black\") {\n    stylesheet += `\n      .blocklyText {\n        fill: #575e75;\n      }\n      .blocklyDropdownText {\n        fill: #575e75 !important;\n      }\n      .blocklyDropDownDiv .goog-menuitem,\n      #s3devIDD > li {\n        color: #575e75;\n      }`;\n  }\n  if (textMode === \"colorOnWhite\") {\n    stylesheet += `\n      .blocklyDropDownDiv:not([style*=\"rgb(255, 255, 255)\"]) .goog-menuitem {\n        color: #575e75;\n      }`;\n  }\n  if (textMode === \"colorOnBlack\") {\n    stylesheet += `\n      .blocklyDropDownDiv:not([style*=\"rgb(255, 255, 255)\"]) .goog-option-selected .goog-menuitem-checkbox {\n        filter: brightness(0) invert(1);\n      }\n      .u-dropdown-searchbar {\n        border-color: rgba(255, 255, 255, 0.15);\n      }`;\n  }\n  var categories = {\n    motion: {\n      color: \"#4C97FF\",\n      tertiaryColor: \"#3373CC\",\n    },\n    looks: {\n      color: \"#9966FF\",\n      tertiaryColor: \"#774DCB\",\n    },\n    sounds: {\n      color: \"#CF63CF\",\n      tertiaryColor: \"#BD42BD\",\n      alt: \"sound\",\n    },\n    events: {\n      color: \"#DE9E2E\",\n      tertiaryColor: \"#CC9900\",\n    },\n    control: {\n      color: \"#FFBF00\",\n      tertiaryColor: \"#CF8B17\",\n    },\n    sensing: {\n      color: \"#5CB1D6\",\n      tertiaryColor: \"#2E8EB8\",\n    },\n    operators: {\n      color: \"#59C059\",\n      tertiaryColor: \"#389438\",\n    },\n    data: {\n      color: \"#FF8C1A\",\n      tertiaryColor: \"#DB6E00\",\n      alt: \"variables\",\n    },\n    \"data-lists\": {\n      color: \"#FF661A\",\n      tertiaryColor: \"#E64D00\",\n      alt: \"lists\",\n      var: \"dataLists\",\n    },\n    custom: {\n      color: \"#FF6680\",\n      tertiaryColor: \"#FF6355\",\n      alt: \"myBlocks\",\n    },\n    Pen: {\n      // For historical reasons, this is called \"Pen\".\n      color: \"#0FBD8C\",\n      tertiaryColor: \"#0B8E69\",\n      alt: \"pen\",\n    },\n    TurboWarp: {\n      color: \"#ff4c4c\",\n      tertiaryColor: \"#e64444\", // TODO fix\n      alt: \"tw\",\n      var: \"tw\",\n    },\n    sa: {\n      color: \"#29beb8\",\n      tertiaryColor: \"#3aa8a4\",\n      alt: \"a-b\",\n    },\n  };\n\n  for (var prop of Object.keys(categories)) {\n    var settingName = categories[prop].var ? categories[prop].var : prop;\n    var propNameForSettings = prop === \"TurboWarp\" ? \"tw\" : prop;\n    if (textMode === \"white\" || textMode === \"black\") {\n      let tertiary = multiply(addon.settings.get(propNameForSettings + \"-color\"), { r: 0.8, g: 0.8, b: 0.8 });\n      stylesheet += `g[data-category=\"${prop}\"] > path.blocklyBlockBackground {\n        fill: var(--editorTheme3-${settingName}Color);\n        ${textMode === \"black\" ? \"--sa-block-text-color: #575e75;\" : \"\"}\n      }\n      .blocklyBlockBackground[fill=\"${categories[prop].tertiaryColor}\"] /* open dropdown */ {\n        fill: #0003;\n      }\n      .scratchCategoryId-${categories[prop].alt ? categories[prop].alt : prop} > .scratchCategoryItemBubble {\n        background-color: var(--editorTheme3-${settingName}Color) !important;\n      }\n      .blocklyDropDownDiv[data-category=\"${prop}\"]:not([style*=\"rgb(255, 255, 255)\"]) {\n        background-color: var(--editorTheme3-${settingName}Color) !important;\n        border-color: #0003 !important;\n      }\n      .blocklyBubbleCanvas [stroke=\"${categories[prop].tertiaryColor}\"] {\n        stroke: var(--editorTheme3-${settingName}Color);\n      }\n      #s3devIDD > li.${prop} {\n        background-color: var(--editorTheme3-${settingName}Color);\n      }\n      #s3devIDD > li.${prop}:hover,\n      #s3devIDD > li.${prop}.sel {\n        background-color: ${tertiary};\n      }\n      .sa-debugger-block-preview[data-category=\"${prop}\"] {\n        background-color: var(--editorTheme3-${settingName}Color) !important;\n      }\n      `;\n      if (prop === \"custom\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#FF6680\"] {\n          fill: var(--editorTheme3-${prop}Color);\n          ${textMode === \"black\" ? \"--sa-block-text-color: #575e75;\" : \"\"}\n        }\n        #s3devIDD > li.null {\n          background-color: var(--editorTheme3-${settingName}Color);\n        }\n        #s3devIDD > li.null:hover,\n        #s3devIDD > li.null.sel {\n          background-color: ${tertiary};\n        }`;\n      }\n      if (prop === \"sensing\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#5CB1D6\"] {\n          fill: var(--editorTheme3-${prop}Color);\n          ${textMode === \"black\" ? \"--sa-block-text-color: #575e75;\" : \"\"}\n        }`;\n      }\n      if (prop === \"events\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#FFBF00\"] {\n          fill: var(--editorTheme3-${prop}Color);\n          ${textMode === \"black\" ? \"--sa-block-text-color: #575e75;\" : \"\"}\n        }\n        .blocklyDropDownDiv[style*=\"rgb(255, 191, 0)\"] {\n          background-color: var(--editorTheme3-${prop}Color) !important;\n          border-color: #0003 !important;\n        }`;\n      }\n      if (prop === \"Pen\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#0FBD8C\"] {\n          fill: var(--editorTheme3-${prop}Color);\n          ${textMode === \"black\" ? \"--sa-block-text-color: #575e75;\" : \"\"}\n        }\n        .blocklyDropDownDiv[style*=\"rgb(15, 189, 140)\"] {\n          background-color: var(--editorTheme3-${prop}Color) !important;\n          border-color: #0003 !important;\n        }\n        #s3devIDD > li.extension {\n          background-color: var(--editorTheme3-${settingName}Color);\n        }\n        #s3devIDD > li.extension:hover,\n        #s3devIDD > li.extension.sel {\n          background-color: ${tertiary};\n        }`;\n      }\n      if (prop === \"sa\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#29beb8\"] {\n          fill: var(--editorTheme3-${prop}Color);\n          ${textMode === \"black\" ? \"--sa-block-text-color: #575e75;\" : \"\"}\n        }`;\n      }\n    } else {\n      let background = { colorOnWhite: \"#fff\", colorOnBlack: \"#282828\" }[textMode];\n      let inputShadow = { colorOnWhite: \"#00000026\", colorOnBlack: \"#fff3\" }[textMode];\n      let secondary = multiply(addon.settings.get(propNameForSettings + \"-color\"), { a: 0.15 });\n      let secondaryActive = multiply(addon.settings.get(propNameForSettings + \"-color\"), { a: 0.25 });\n      let menuText = { colorOnWhite: \"#575e75\", colorOnBlack: \"#fff\" }[textMode];\n      stylesheet += `g[data-category=\"${prop}\"] > path.blocklyBlockBackground,\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"dropdown\"] > rect,\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"variable\"] > rect {\n        fill: ${background};\n        stroke: var(--editorTheme3-${settingName}Color);\n        --sa-block-text-color: ${menuText};\n        --sa-block-secondary-color: ${secondaryActive};\n      }\n      g[data-category=\"${prop}\"] > .blocklyText,\n      g[data-category=\"${prop}\"] > g:not([data-id]) > .blocklyText /* variable and list reporters */ {\n        fill: var(--editorTheme3-${settingName}Color);\n      }\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"dropdown\"] > .blocklyDropdownText,\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"variable\"] > .blocklyDropdownText,\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"dropdown\"] > g > .blocklyDropdownText {\n        fill: var(--editorTheme3-${settingName}Color) !important;\n      }\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"dropdown\"] > path,\n      g[data-category=\"${prop}\"] > g[data-argument-type=\"variable\"] > path,\n      g[data-category=\"${prop}\"] > path[data-argument-type=\"boolean\"] {\n        fill: ${secondary};\n        stroke: var(--editorTheme3-${settingName}Color);\n      }\n      .blocklyBlockBackground[fill=\"${categories[prop].tertiaryColor}\"] /* open dropdown */ {\n        fill: ${secondaryActive} !important;\n      }\n      .scratchCategoryId-${categories[prop].alt ? categories[prop].alt : prop} > .scratchCategoryItemBubble {\n        background-color: var(--editorTheme3-${settingName}Color) !important;\n      }\n      .blocklyDropDownDiv[data-category=\"${prop}\"]:not([style*=\"rgb(255, 255, 255)\"]) {\n        background-color: ${background} !important;\n        border-color: var(--editorTheme3-${settingName}Color) !important;\n      }\n      .blocklyDropDownDiv[data-category=\"${prop}\"] .goog-menuitem-highlight {\n        background-color: ${secondaryActive};\n      }\n      .blocklyBubbleCanvas [stroke=\"${categories[prop].tertiaryColor}\"],\n      g[data-category=${prop}] > g[data-argument-type*=\"text\"] > path,\n      g[data-category=${prop}] > g > line  {\n        stroke: var(--editorTheme3-${settingName}Color);\n      }\n      .blocklyWidgetDiv.fieldTextInput[style*=\"box-shadow\"] {\n        box-shadow: 0 0 0 4px ${inputShadow} !important;\n      }\n      #s3devIDD > li.${prop} {\n        background-color: ${secondary};\n        color: var(--editorTheme3-${settingName}Color);\n      }\n      #s3devIDD > li.${prop}:hover,\n      #s3devIDD > li.${prop}.sel {\n        background-color: ${secondaryActive};\n      }`;\n      if (prop === \"custom\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#FF6680\"] {\n          fill: ${background};\n          stroke: var(--editorTheme3-${prop}Color);\n          --sa-block-text-color: ${menuText};\n          --sa-block-secondary-color: ${secondaryActive};\n        }\n        path.blocklyBlockBackground[fill=\"#FF6680\"] ~ .blocklyText,\n        g[data-shapes=\"c-block c-1 hat\"] > g[data-shapes=\"stack\"]:not(.blocklyDraggable) > .blocklyText,\n        .blocklyEditableText > rect[fill=\"#FF3355\"] ~ .blocklyText {\n          fill: var(--editorTheme3-${prop}Color);\n        }\n        path.blocklyBlockBackground[fill=\"#FF6680\"] ~ [data-argument-type=\"text\"] > path {\n          stroke: var(--editorTheme3-${prop}Color);\n        }\n        g[data-shapes=\"c-block c-1 hat\"] > g[data-shapes=\"stack\"]:not(.blocklyDraggable) > path,\n        path[data-argument-type=\"boolean\"][fill=\"#FF3355\"] {\n          fill: ${secondary};\n          stroke: var(--editorTheme3-${prop}Color);\n        }\n        .blocklyEditableText > rect[fill=\"#FF3355\"] {\n          fill: ${secondary};\n        }\n        #s3devIDD > li.null {\n          background-color: ${secondary};\n          color: var(--editorTheme3-${settingName}Color);\n        }\n        #s3devIDD > li.null:hover,\n        #s3devIDD > li.null.sel {\n          background-color: ${secondaryActive};\n        }`;\n      }\n      if (prop === \"sensing\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#5CB1D6\"],\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#5CB1D6\"] {\n          fill: ${background};\n          stroke: var(--editorTheme3-${prop}Color);\n          --sa-block-text-color: ${menuText};\n          --sa-block-secondary-color: ${secondaryActive};\n        }\n        g[data-argument-type=\"dropdown\"] > path[fill=\"#47A8D1\"] {\n          fill: ${secondary};\n          stroke: var(--editorTheme3-${prop}Color);\n        }\n        path.blocklyBlockBackground[fill=\"#5CB1D6\"] ~ .blocklyText {\n          fill: var(--editorTheme3-${prop}Color);\n        }\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#5CB1D6\"] ~ .blocklyText,\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#2E8EB8\"] ~ .blocklyText,\n        g[data-argument-type=\"dropdown\"] > path[fill=\"#47A8D1\"] ~ * > .blocklyText,\n        g[data-argument-type=\"dropdown\"] > path[fill=\"#2E8EB8\"] ~ * > .blocklyText {\n          fill: var(--editorTheme3-${prop}Color) !important;\n        }\n        .blocklyDropDownDiv[style*=\"rgb(92, 177, 214)\"] {\n          background-color: ${background} !important;\n          border-color: var(--editorTheme3-${settingName}Color) !important;\n        }\n        .blocklyDropDownDiv[style*=\"rgb(92, 177, 214)\"] .goog-menuitem-highlight {\n          background-color: ${secondaryActive};\n        }`;\n      }\n      if (prop === \"events\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#FFBF00\"],\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#FFBF00\"],\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#CC9900\"] {\n          fill: ${background};\n          stroke: var(--editorTheme3-${settingName}Color);\n          --sa-block-text-color: ${menuText};\n          --sa-block-secondary-color: ${secondaryActive};\n        }\n        path.blocklyBlockBackground[fill=\"#FFBF00\"] ~ .blocklyText {\n          fill: var(--editorTheme3-${prop}Color);\n        }\n        path.blocklyBlockBackground[fill=\"#FFBF00\"] ~ g[data-argument-type=\"variable\"] > g > .blocklyDropdownText {\n          fill: var(--editorTheme3-${prop}Color) !important;\n        }\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#FFBF00\"] ~ .blocklyText,\n        g[data-argument-type=\"dropdown\"] > rect[fill=\"#CC9900\"] ~ .blocklyText {\n          fill: var(--editorTheme3-${prop}Color) !important;\n        }\n        .blocklyDropDownDiv[style*=\"rgb(255, 191, 0)\"] {\n          background-color: ${background} !important;\n          border-color: var(--editorTheme3-${settingName}Color) !important;\n        }\n        .blocklyDropDownDiv[style*=\"rgb(255, 191, 0)\"] .goog-menuitem-highlight {\n          background-color: ${secondaryActive};\n        }`;\n      }\n      if (prop === \"Pen\") {\n        stylesheet += `g[data-category] /* specificity */ > path.blocklyBlockBackground[fill=\"#0FBD8C\"] {\n          fill: ${background};\n          stroke: var(--editorTheme3-${prop}Color);\n          --sa-block-text-color: ${menuText};\n          --sa-block-secondary-color: ${secondaryActive};\n        }\n        path.blocklyBlockBackground[fill=\"#0FBD8C\"] ~ .blocklyText {\n          fill: var(--editorTheme3-${prop}Color);\n        }\n        path.blocklyBlockBackground[fill=\"#0FBD8C\"] ~ g[data-argument-type=\"dropdown\"] > g > .blocklyDropdownText {\n          fill: var(--editorTheme3-${prop}Color) !important;\n        }\n        g[data-argument-type=\"dropdown\"] > path[fill=\"#0DA57A\"] {\n          fill: ${secondary};\n          stroke: var(--editorTheme3-${prop}Color);\n        }\n        .blocklyDropDownDiv[style*=\"rgb(15, 189, 140)\"] {\n          background-color: ${background} !important;\n          border-color: var(--editorTheme3-${settingName}Color) !important;\n        }\n        .blocklyDropDownDiv[style*=\"rgb(15, 189, 140)\"] .goog-menuitem-highlight {\n          background-color: ${secondaryActive};\n        }\n        path.blocklyBlockBackground[fill=\"#0FBD8C\"] ~ [data-argument-type=\"text\"] > path,\n        path.blocklyBlockBackground[fill=\"#0FBD8C\"] ~ g > line  {\n          stroke: var(--editorTheme3-${prop}Color);\n        }\n        #s3devIDD > li.extension {\n          background-color: ${secondary};\n          color: var(--editorTheme3-${settingName}Color);\n        }\n        #s3devIDD > li.extension:hover,\n        #s3devIDD > li.extension.sel {\n          background-color: ${secondaryActive};\n        }`;\n      }\n      if (prop === \"sa\") {\n        stylesheet += `path.blocklyBlockBackground[fill=\"#29beb8\"] {\n          fill: ${background};\n          stroke: var(--editorTheme3-${prop}Color);\n          --sa-block-text-color: ${menuText};\n          --sa-block-secondary-color: ${secondaryActive};\n        }\n        path.blocklyBlockBackground[fill=\"#29beb8\"] ~ .blocklyText {\n          fill: var(--editorTheme3-${prop}Color);\n        }\n        path.blocklyBlockBackground[fill=\"#29beb8\"] ~ [data-argument-type=\"text\"] > path {\n          stroke: var(--editorTheme3-${prop}Color);\n        }`;\n      }\n    }\n  }\n\n  document.documentElement.style.setProperty(\n    \"--editorTheme3-inputColor-text\",\n    textColor(addon.settings.get(\"input-color\"))\n  );\n  newStyle.textContent = stylesheet;\n}\n\nexport default async function ({ addon, global, console }) {\n  const otherStyle = document.querySelector(`[data-addon-id='${addon.self.id}']`);\n  const newStyle = document.createElement(\"style\");\n  updateSettings(addon, newStyle);\n  addon.settings.addEventListener(\"change\", () => {\n    updateSettings(addon, newStyle);\n  });\n  newStyle.className = \"scratch-addons-style\";\n  newStyle.setAttribute(\"data-addon-id\", addon.self.id);\n  newStyle.setAttribute(\"data-addon-index\", otherStyle.getAttribute(\"data-addon-index\"));\n\n  otherStyle.parentElement.insertBefore(newStyle, otherStyle.nextSibling);\n\n  // Look for reenable event to enable the style. cs.js cannot handle an appended style.\n  addon.self.addEventListener(\"reenabled\", () => (newStyle.disabled = false));\n}\n","function parseHex(hex) {\n  return {\n    r: parseInt(hex.substring(1, 3), 16),\n    g: parseInt(hex.substring(3, 5), 16),\n    b: parseInt(hex.substring(5, 7), 16),\n    a: hex.length >= 9 ? parseInt(hex.substring(7, 9), 16) / 255 : 1,\n  };\n}\n\nfunction convertComponentToHex(a) {\n  a = Math.round(a).toString(16);\n  if (a.length === 1) return `0${a}`;\n  return a;\n}\n\nfunction convertToHex(obj) {\n  const r = convertComponentToHex(obj.r);\n  const g = convertComponentToHex(obj.g);\n  const b = convertComponentToHex(obj.b);\n  const a = obj.a !== undefined ? convertComponentToHex(255 * obj.a) : \"\";\n  return `#${r}${g}${b}${a}`;\n}\n\nfunction convertFromHsv({ h, s, v }) {\n  if (s === 0) return { r: 255 * v, g: 255 * v, b: 255 * v };\n  const h1 = h / 60;\n  const hi = Math.floor(h1);\n  const x = v * (1 - s * (1 - h1 + hi));\n  const y = v * (1 - s * (h1 - hi));\n  const z = v * (1 - s);\n  switch (hi) {\n    case 0:\n      return { r: 255 * v, g: 255 * x, b: 255 * z };\n    case 1:\n      return { r: 255 * y, g: 255 * v, b: 255 * z };\n    case 2:\n      return { r: 255 * z, g: 255 * v, b: 255 * x };\n    case 3:\n      return { r: 255 * z, g: 255 * y, b: 255 * v };\n    case 4:\n      return { r: 255 * x, g: 255 * z, b: 255 * v };\n    case 5:\n      return { r: 255 * v, g: 255 * z, b: 255 * y };\n    default:\n      // ???\n      return { r: 0, g: 0, b: 0 };\n  }\n}\n\nfunction convertToHsv({ r, g, b }) {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const v = Math.max(r, g, b);\n  const d = v - Math.min(r, g, b);\n  if (d === 0) return { h: 0, s: 0, v: v }; // gray\n  const s = d / v;\n  const hr = (v - r) / d;\n  const hg = (v - g) / d;\n  const hb = (v - b) / d;\n  let h1;\n  if (!hr) h1 = hb - hg;\n  else if (!hg) h1 = 2 + hr - hb;\n  else if (!hb) h1 = 4 + hg - hr;\n  const h = (60 * h1) % 360;\n  return { h, s, v };\n}\n\nfunction brightness(hex) {\n  const { r, g, b } = parseHex(hex);\n  return r * 0.299 + g * 0.587 + b * 0.114;\n}\n\nfunction textColor(hex, black, white, threshold) {\n  threshold = threshold !== undefined ? threshold : 170;\n  if (typeof threshold !== \"number\") threshold = brightness(threshold);\n  if (brightness(hex) > threshold) {\n    // https://stackoverflow.com/a/3943023\n    return black !== undefined ? black : \"#575e75\";\n  } else {\n    return white !== undefined ? white : \"#ffffff\";\n  }\n}\n\nfunction multiply(hex, c) {\n  const { r, g, b, a } = parseHex(hex);\n  if (c.r === undefined) c.r = 1;\n  if (c.g === undefined) c.g = 1;\n  if (c.b === undefined) c.b = 1;\n  if (c.a === undefined) c.a = 1;\n  return convertToHex({ r: c.r * r, g: c.g * g, b: c.b * b, a: c.a * a });\n}\n\nfunction brighten(hex, c) {\n  const { r, g, b, a } = parseHex(hex);\n  if (c.r === undefined) c.r = 1;\n  if (c.g === undefined) c.g = 1;\n  if (c.b === undefined) c.b = 1;\n  if (c.a === undefined) c.a = 1;\n  return convertToHex({\n    r: (1 - c.r) * 255 + c.r * r,\n    g: (1 - c.g) * 255 + c.g * g,\n    b: (1 - c.b) * 255 + c.b * b,\n    a: 1 - c.a + c.a * a,\n  });\n}\n\nfunction alphaBlend(opaqueHex, transparentHex) {\n  const { r: r1, g: g1, b: b1 } = parseHex(opaqueHex);\n  const { r: r2, g: g2, b: b2, a } = parseHex(transparentHex);\n  return convertToHex({\n    r: (1 - a) * r1 + a * r2,\n    g: (1 - a) * g1 + a * g2,\n    b: (1 - a) * b1 + a * b2,\n  });\n}\n\nfunction makeHsv(hSource, sSource, vSource) {\n  const h = typeof hSource === \"number\" ? hSource : convertToHsv(parseHex(hSource)).h;\n  const s =\n    typeof hSource !== \"number\" && convertToHsv(parseHex(hSource)).s === 0\n      ? 0\n      : typeof sSource === \"number\"\n      ? sSource\n      : convertToHsv(parseHex(sSource)).s;\n  const v = typeof vSource === \"number\" ? vSource : convertToHsv(parseHex(vSource)).v;\n  return convertToHex(convertFromHsv({ h, s, v }));\n}\n\nfunction recolorFilter(hex) {\n  const { r, g, b } = parseHex(hex);\n  return `url(\"data:image/svg+xml,\n    <svg xmlns='http://www.w3.org/2000/svg'>\n      <filter id='recolor'>\n        <feColorMatrix values='\n          0 0 0 0 ${r / 255}\n          0 0 0 0 ${g / 255}\n          0 0 0 0 ${b / 255}\n          0 0 0 1 0\n        '/>\n      </filter>\n    </svg>#recolor\n  \")`\n    .split(\"\\n\")\n    .join(\"\");\n}\n\nexport {\n  parseHex,\n  convertToHex,\n  convertFromHsv,\n  convertToHsv,\n  brightness,\n  textColor,\n  multiply,\n  brighten,\n  alphaBlend,\n  makeHsv,\n  recolorFilter,\n};\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;;;;;;;;;;;;ACHA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAWA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AA1DA;AACA;AAgEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA2BA;AACA;AAWA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAQA;AACA;AAAA;AACA;AAeA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAmDA;AACA;AA8BA;AACA;AAAA;AACA;AA2BA;AACA;AAAA;AACA;AAyBA;AACA;AAAA;AACA;AAmCA;AACA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;ACtfA;AAicA;AACA;;;;;A","sourceRoot":""}